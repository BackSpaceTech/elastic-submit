// Generated by CoffeeScript 1.3.3
(function() {
  var accounts, articles, async, backlinksList, consolex, currentIndexer, currentLoop, currentService, currentStep, doService, fileAccounts, fileArticles, fileBacklinks, fileProfiles, fs, goodService, i, importFiles, indexerDetails, indexers, jQueryLoc, numAccounts, numIndexerLoops, numPosts, randomAccount, scriptDebug, service, serviceAccount, serviceName, services, spinner, submitArticle, submitMode, system, waitTimeout, webPage, xpath2css;

  scriptDebug = false;

  system = require('system');

  fs = require('fs');

  webPage = require('webpage');

  async = require('async');

  xpath2css = require('./app/xpath2css.js');

  consolex = require('./app/console-xtra');

  importFiles = require('./app/import-files');

  spinner = require('./app/spinner');

  jQueryLoc = './js/jquery-2.2.4.min.js';

  waitTimeout = 30000;

  submitMode = system.args[1];

  if (submitMode === 'seo') {
    fileAccounts = './accounts/' + system.args[2] + '.csv';
    fileArticles = './articles/' + system.args[3] + '.txt';
    fileBacklinks = './backlinks/' + system.args[4] + '.txt';
    numPosts = system.args[5];
    console.log('\n');
    consolex.log('cyan', '---------------- Submission Details --------------------');
    consolex.log('cyan', 'Submit mode: ' + submitMode);
    consolex.log('cyan', 'Accounts file: ' + fileAccounts);
    consolex.log('cyan', 'Articles file: ' + fileArticles);
    consolex.log('cyan', 'Backlinks saved to file: ' + fileBacklinks);
    consolex.log('cyan', 'Number of Submissions: ' + numPosts);
    currentService = 0;
    currentStep = 0;
    submitArticle = {
      title: '',
      body: '',
      keywords: ''
    };
    randomAccount = {
      username: '',
      password: '',
      site: ''
    };
    backlinksList = '';
    services = importFiles.services('./settings/services.txt');
    indexerDetails = importFiles.indexers('./settings/indexers.txt');
    service = [];
    currentService = 0;
    i = 0;
    while (i < services.length) {
      if (services[i].status.toLowerCase() === 'ok') {
        service[currentService] = require('./scripts-services/' + services[i].name);
      }
      ++currentService;
      ++i;
    }
    numIndexerLoops = 0;
    indexers = [];
    currentIndexer = 0;
    i = 0;
    while (i < indexerDetails.length) {
      if (indexerDetails[i].status.toLowerCase() === 'ok') {
        indexers[currentIndexer] = require('./indexers/' + indexerDetails[i].name);
        indexers[currentIndexer].login = indexerDetails[i];
        numIndexerLoops += indexers[currentIndexer].steps.length;
        ++currentIndexer;
      }
      ++i;
    }
    consolex.log('cyan', 'Importing files...');
    accounts = importFiles.accounts(fileAccounts);
    articles = importFiles.articles(fileArticles);
  } else if (submitMode === 'seo-accounts') {
    fileAccounts = './accounts/' + system.args[2] + '.csv';
    fileProfiles = './profiles/' + system.args[3] + '.csv';
    serviceAccount = system.args[4];
    numAccounts = system.args[5];
  } else {
    consolex.log('red', 'Submit mode argmument missing or bad');
    phantom.exit(0);
  }

  currentLoop = 0;

  currentStep = 0;

  goodService = true;

  serviceName = '';

  doService = function(service, doneCallback) {
    var getSelector, page, stepError;
    serviceName = service.name;
    consolex.log('yellow', '\n-------------- Submit to ' + serviceName + ' ----------------');
    consolex.log('blue', 'Opening url ' + service.url + '...');
    page = webPage.create();
    page.viewportSize = {
      width: 800,
      height: 600
    };
    if (scriptDebug) {
      page.onConsoleMessage = function(msg) {
        console.log(msg);
      };
    }
    page.onError = function(msg, trace) {
      if (msg.slice(0, 9) !== 'TypeError') {
        console.log(msg);
      }
      if (trace) {
        trace.forEach(function(t) {
          var stackmsg;
          stackmsg = ' at' + (t["function"] ? ' function ' + t["function"] : '') + ' (' + (t.file || t.sourceURL) + ':' + t.line + ')';
        });
      }
    };
    getSelector = function(step) {
      var tempSelect;
      tempSelect = (function() {
        switch (false) {
          case !step.selector:
            return step.selector;
          case !step.xpath:
            return xpath2css.x2c(step.xpath);
          case !step.text:
            return ':contains("' + step.text + '")';
          default:
            return null;
        }
      })();
      return tempSelect;
    };
    stepError = function(step) {
      goodService = false;
      consolex.log('red', 'Step error - ' + step.command + '. Skipping ' + serviceName + '...');
      return page.render('./capture/error.png');
    };
    page.settings.userAgent = 'Mozilla/5.0 (Windows NT 10.0; WOW64) ' + 'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36';
    return page.open(service.url, function(status) {
      var doStep;
      if (status === 'success') {
        consolex.log('blue', 'Opened url.');
        doStep = function(step, doneCallback) {
          var count, jQueryLoadTime, saveScreen, submitForm, temp, tempDelay, tempPassword, tempTime, tempUser, typeField, x;
          saveScreen = function() {
            if (scriptDebug) {
              return page.render('./capture/capture' + currentStep + '.png');
            }
          };
          typeField = function(selector, inputText) {
            var x;
            if (page.injectJs(jQueryLoc)) {
              x = page.evaluate((function(s) {
                if (($(s).length)) {
                  $(s)[0].focus();
                  return true;
                } else {
                  return false;
                }
              }), selector);
              if (x) {
                return page.sendEvent('keypress', inputText);
              } else {
                consolex.log('red', 'Could not find selector');
                return stepError(step);
              }
            } else {
              consolex.log('red', 'Could not inject jQuery');
              return stepError(step);
            }
          };
          submitForm = function(selector) {
            var x;
            if (page.injectJs(jQueryLoc)) {
              x = page.evaluate((function(s) {
                if ($(s).length) {
                  $(s).submit();
                  return true;
                } else {
                  return false;
                }
              }), selector);
              if (!x) {
                consolex.log('red', 'Could not find selector');
                return stepError(step);
              }
            } else {
              consolex.log('red', 'Could not inject jQuery');
              return stepError(step);
            }
          };
          ++currentStep;
          if (goodService) {
            consolex.log('blue', 'Step ' + currentStep + ' - ' + step.command);
            if (step.command === 'create-article') {
              consolex.log('cyan', 'Creating article...');
              submitArticle = spinner.getArticle(articles, step.micro, step.noHTML);
              randomAccount = spinner.getAccount(accounts, serviceName);
              return doneCallback(null);
            } else if (step.command === 'wait-for') {
              saveScreen();
              consolex.log('blue', 'Waiting for ' + step.selector + '...');
              count = 0;
              x = 0;
              tempDelay = 250;
              jQueryLoadTime = 1000;
              if (page.injectJs(jQueryLoc)) {
                return async.whilst((function() {
                  return count < waitTimeout;
                }), (function(callback) {
                  count += tempDelay;
                  if (count > jQueryLoadTime) {
                    x = page.evaluate((function(s) {
                      var y;
                      y = $(s);
                      if (y) {
                        return y.length;
                      } else {
                        return 0;
                      }
                    }), step.selector);
                    if (x > 0) {
                      count = waitTimeout;
                    }
                  }
                  setTimeout((function() {
                    callback(null, count);
                  }), tempDelay);
                }), function(err, n) {
                  if (x && (x.length !== 0)) {
                    saveScreen();
                    return doneCallback(null);
                  } else {
                    consolex.log('red', 'Could not find selector');
                    stepError(step);
                    return doneCallback(null);
                  }
                });
              } else {
                consolex.log('red', 'Could not inject jQuery');
                stepError(step);
                return doneCallback(null);
              }
            } else if (step.command === 'wait') {
              tempTime = step.value;
              consolex.log('blue', 'Waiting for ' + tempTime + ' ms...');
              count = 0;
              tempDelay = 1000;
              return async.whilst((function() {
                return count < tempTime;
              }), (function(callback) {
                count += tempDelay;
                setTimeout((function() {
                  callback(null, count);
                }), tempDelay);
              }), function(err, n) {
                saveScreen();
                return doneCallback(null);
              });
            } else if (step.command === 'login' || step.command === 'login-indexer') {
              saveScreen();
              if (step.command === 'login') {
                if (randomAccount.username === 'no accounts') {
                  consolex.log('red', 'No ' + serviceName + ' accounts!');
                  stepError(step);
                } else {
                  consolex.log('blue', 'Logging in: ' + randomAccount.username);
                  tempUser = randomAccount.username;
                  tempPassword = randomAccount.password;
                }
              } else {
                consolex.log('blue', 'Logging in: ' + service.login.username);
                tempUser = service.login.username;
                tempPassword = service.login.password;
              }
              typeField(step.username, tempUser);
              typeField(step.password, tempPassword);
              if (step.submit) {
                submitForm(step.form);
              }
              saveScreen();
              return doneCallback(null);
            } else if (step.command === 'click') {
              saveScreen();
              if (page.injectJs(jQueryLoc)) {
                x = page.evaluate((function(s) {
                  var element, event;
                  if (($(s).length)) {
                    element = $(s)[0];
                    event = document.createEvent('MouseEvents');
                    event.initMouseEvent('click', true, true, window, 1, 0, 0);
                    element.dispatchEvent(event);
                    return true;
                  } else {
                    return false;
                  }
                }), step.selector);
                if (!x) {
                  consolex.log('red', 'Could not find selector');
                  stepError(step);
                }
              } else {
                consolex.log('red', 'Could not inject jQuery');
                stepError(step);
              }
              saveScreen();
              return doneCallback(null);
            } else if (step.command === 'title' || step.command === 'body') {
              saveScreen();
              if (step.command === 'title') {
                temp = submitArticle.title;
              } else {
                temp = submitArticle.body;
              }
              typeField(step.selector, temp);
              saveScreen();
              return doneCallback(null);
            } else if (step.command === 'save-href') {
              saveScreen();
              if (page.injectJs(jQueryLoc)) {
                x = page.evaluate((function(s) {
                  if (($(s).length)) {
                    return $(s).attr('href');
                  } else {
                    return false;
                  }
                }), step.selector);
                if (x) {
                  backlinksList += x + '\n';
                  try {
                    fs.write(fileBacklinks, x, 'a');
                    fs.write(fileBacklinks, '\n', 'a');
                  } catch (e) {
                    consolex.log('red', 'File error');
                    consolex.log('red', e);
                    stepError(step);
                  }
                  consolex.log('blue', 'Saved backlink to ' + fileBacklinks);
                } else {
                  consolex.log('red', 'Could not find selector');
                  stepError(step);
                }
              } else {
                consolex.log('red', 'Could not inject jQuery');
                stepError(step);
              }
              saveScreen();
              return doneCallback(null);
            } else if (step.command === 'backlinks') {
              saveScreen();
              typeField(step.selector, backlinksList);
              saveScreen();
              return doneCallback(null);
            } else {
              consolex.log('red', 'Unrecognized command: ' + step.command);
              stepError(step);
              return doneCallback(null);
            }
          } else {
            return doneCallback(null);
          }
        };
        return async.eachSeries(service.steps, doStep, function(err) {
          if (goodService) {
            consolex.log('green', 'Finished steps!');
          } else {
            consolex.log('red', '------------- Failed submission -------------');
          }
          goodService = true;
          currentStep = 0;
          page.close();
          return doneCallback(null);
        });
      } else {
        consolex.log('red', 'Error opening page!');
        stepError(step);
        return doneCallback(null);
      }
    });
  };

  if (submitMode = 'seo') {
    async.whilst((function() {
      return currentLoop < numPosts;
    }), (function(next) {
      return async.eachSeries(service, doService, function(err) {
        currentLoop++;
        consolex.log('green', 'Finished services for loop');
        return next();
      });
    }), function(err) {
      consolex.log('green', 'Finished all submissions');
      return async.eachSeries(indexers, doService, function(err) {
        if (err) {
          return console.log('Indexer submission failed');
        } else {
          consolex.log('green', 'Finished indexer submissions');
          return phantom.exit(0);
        }
      });
    });
  } else if (submitMode = 'seo-accounts') {
    async.whilst((function() {
      return currentLoop < numAccounts;
    }), (function(next) {
      return async.eachSeries(service, doService, function(err) {
        currentLoop++;
        consolex.log('green', 'Finished services for loop');
        return next();
      });
    }), function(err) {
      consolex.log('green', 'Finished all account creation tasks');
      return phantom.exit(0);
    });
  }

}).call(this);
